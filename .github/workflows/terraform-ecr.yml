name: 'Terraform'

on:
  push:
    branches:
      - master
  pull_request:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.SVC_GH_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.SVC_GH_SECRET_KEY }}
  AWS_DEFAULT_REGION: 'us-east-1'

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: 'Setup Git Credentials'
      uses: fusion-engineering/setup-git-credentials@v2
      with:
        credentials: ${{ secrets.SVC_GH_CREDS }}

    - name: 'Setup Terraform'
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.13.5

    - name: 'Terraform Init'
      id: init
      run: terraform init -no-color

    - name: 'Terraform Validate'
      id: validate
      if: github.event_name == 'pull_request'
      run: terraform validate -no-color

    - name: 'Terraform Plan'
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color

    - name: 'Update Pull Request'
      uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        PLAN: "${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `
            #### Terraform Initialization: ${{ steps.init.outcome }}
            #### Terraform Validate: ${{ steps.validate.outcome }}
            #### Terraform Plan: ${{ steps.plan.outcome }}
            <details><summary>Show Plan</summary>
            ${process.env.PLAN}
            </details>
            #### Pusher: @${{ github.actor }}, Action: ${{ github.event_name }}
          `;
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: 'Terraform plan status'
      if: steps.plan.outcome == 'failure'
      run: exit 1
      
    - name: 'Terraform Apply'
      id: apply
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: terraform apply --auto-approve

  build-and-publish:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: my-ecr-repo
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
